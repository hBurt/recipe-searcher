/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: david@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular;

import com.spoonacular.client.ApiException;
import java.math.BigDecimal;
import java.io.File;
import com.spoonacular.client.model.InlineObject8;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Analyze a Recipe Search Query
     *
     * Parse a recipe search query to find out its intention.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeARecipeSearchQueryTest() throws ApiException {
        String q = null;
        Object response = api.analyzeARecipeSearchQuery(q);

        // TODO: test validations
    }
    
    /**
     * Analyze Recipe Instructions
     *
     * Extract ingredients and equipment from the recipe instruction steps.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeRecipeInstructionsTest() throws ApiException {
        String instructions = null;
        Object response = api.analyzeRecipeInstructions(instructions);

        // TODO: test validations
    }
    
    /**
     * Autocomplete Ingredient Search
     *
     * Autocomplete a search for an ingredient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autocompleteIngredientSearchTest() throws ApiException {
        String query = null;
        BigDecimal number = null;
        Boolean metaInformation = null;
        Boolean intolerances = null;
        Object response = api.autocompleteIngredientSearch(query, number, metaInformation, intolerances);

        // TODO: test validations
    }
    
    /**
     * Autocomplete Menu Item Search
     *
     * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autocompleteMenuItemSearchTest() throws ApiException {
        String query = null;
        BigDecimal number = null;
        Object response = api.autocompleteMenuItemSearch(query, number);

        // TODO: test validations
    }
    
    /**
     * Autocomplete Product Search
     *
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autocompleteProductSearchTest() throws ApiException {
        String query = null;
        BigDecimal number = null;
        Object response = api.autocompleteProductSearch(query, number);

        // TODO: test validations
    }
    
    /**
     * Autocomplete Recipe Search
     *
     * Autocomplete a partial input to possible recipe names.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autocompleteRecipeSearchTest() throws ApiException {
        String query = null;
        BigDecimal number = null;
        Object response = api.autocompleteRecipeSearch(query, number);

        // TODO: test validations
    }
    
    /**
     * Classify Cuisine
     *
     * Classify the recipe&#39;s cuisine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyCuisineTest() throws ApiException {
        String title = null;
        String ingredientList = null;
        Object response = api.classifyCuisine(title, ingredientList);

        // TODO: test validations
    }
    
    /**
     * Classify Grocery Product
     *
     * Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyGroceryProductTest() throws ApiException {
        InlineObject8 inlineObject8 = null;
        String locale = null;
        Object response = api.classifyGroceryProduct(inlineObject8, locale);

        // TODO: test validations
    }
    
    /**
     * Classify Grocery Product Bulk
     *
     * Given a set of product jsons, get back classified products.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyGroceryProductBulkTest() throws ApiException {
        Object body = null;
        String locale = null;
        Object response = api.classifyGroceryProductBulk(body, locale);

        // TODO: test validations
    }
    
    /**
     * Convert Amounts
     *
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAmountsTest() throws ApiException {
        String ingredientName = null;
        BigDecimal sourceAmount = null;
        String sourceUnit = null;
        String targetUnit = null;
        Object response = api.convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit);

        // TODO: test validations
    }
    
    /**
     * Create Recipe Card
     *
     * Create Recipe Card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRecipeCardTest() throws ApiException {
        String title = null;
        File image = null;
        String ingredients = null;
        String instructions = null;
        BigDecimal readyInMinutes = null;
        BigDecimal servings = null;
        String mask = null;
        String backgroundImage = null;
        String author = null;
        String backgroundColor = null;
        String fontColor = null;
        String source = null;
        Object response = api.createRecipeCard(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, author, backgroundColor, fontColor, source);

        // TODO: test validations
    }
    
    /**
     * Detect Food in Text
     *
     * Detect ingredients and dishes in texts. This task is also called Named Entity Recognition (NER). In our case the entities are foods. Either dishes, such as pizza and cheeseburger or ingredients, such as cucumber and almonds.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detectFoodInTextTest() throws ApiException {
        String text = null;
        Object response = api.detectFoodInText(text);

        // TODO: test validations
    }
    
    /**
     * Extract Recipe from Website
     *
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and the equipment that is used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRecipeFromWebsiteTest() throws ApiException {
        String url = null;
        Boolean forceExtraction = null;
        Object response = api.extractRecipeFromWebsite(url, forceExtraction);

        // TODO: test validations
    }
    
    /**
     * Generate Meal Plan
     *
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateMealPlanTest() throws ApiException {
        String timeFrame = null;
        BigDecimal targetCalories = null;
        String diet = null;
        String exclude = null;
        Object response = api.generateMealPlan(timeFrame, targetCalories, diet, exclude);

        // TODO: test validations
    }
    
    /**
     * Get a Random Food Joke
     *
     * Get a random joke that includes or is about food.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getARandomFoodJokeTest() throws ApiException {
        Object response = api.getARandomFoodJoke();

        // TODO: test validations
    }
    
    /**
     * Get Analyzed Recipe Instructions
     *
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and the equipment that is used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnalyzedRecipeInstructionsTest() throws ApiException {
        BigDecimal id = null;
        Boolean stepBreakdown = null;
        Object response = api.getAnalyzedRecipeInstructions(id, stepBreakdown);

        // TODO: test validations
    }
    
    /**
     * Get Comparable Products
     *
     * Find comparable products to the given one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getComparableProductsTest() throws ApiException {
        BigDecimal upc = null;
        Object response = api.getComparableProducts(upc);

        // TODO: test validations
    }
    
    /**
     * Get Conversation Suggests
     *
     * This endpoint returns suggestions for things the user can say or ask the chat bot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConversationSuggestsTest() throws ApiException {
        String query = null;
        BigDecimal number = null;
        Object response = api.getConversationSuggests(query, number);

        // TODO: test validations
    }
    
    /**
     * Get Dish Pairing for Wine
     *
     * Get a dish that goes well with a given wine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDishPairingForWineTest() throws ApiException {
        String wine = null;
        Object response = api.getDishPairingForWine(wine);

        // TODO: test validations
    }
    
    /**
     * Get Food Information
     *
     * Get information about a certain food (ingredient).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFoodInformationTest() throws ApiException {
        BigDecimal id = null;
        BigDecimal amount = null;
        String unit = null;
        Object response = api.getFoodInformation(id, amount, unit);

        // TODO: test validations
    }
    
    /**
     * Get Ingredient Substitutes
     *
     * Search for substitutes for a given ingredient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIngredientSubstitutesTest() throws ApiException {
        String ingredientName = null;
        Object response = api.getIngredientSubstitutes(ingredientName);

        // TODO: test validations
    }
    
    /**
     * Get Ingredient Substitutes by ID
     *
     * Search for substitutes for a given ingredient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIngredientSubstitutesByIDTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.getIngredientSubstitutesByID(id);

        // TODO: test validations
    }
    
    /**
     * Get Menu Item Information
     *
     * Get information about a certain menu item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMenuItemInformationTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.getMenuItemInformation(id);

        // TODO: test validations
    }
    
    /**
     * Get Product Information
     *
     * Get information about a packaged food product.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductInformationTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.getProductInformation(id);

        // TODO: test validations
    }
    
    /**
     * Get Random Food Trivia
     *
     * Returns random food trivia.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRandomFoodTriviaTest() throws ApiException {
        Object response = api.getRandomFoodTrivia();

        // TODO: test validations
    }
    
    /**
     * Get Random Recipes
     *
     * Find random (popular) recipes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRandomRecipesTest() throws ApiException {
        Boolean limitLicense = null;
        String tags = null;
        BigDecimal number = null;
        Object response = api.getRandomRecipes(limitLicense, tags, number);

        // TODO: test validations
    }
    
    /**
     * Get Recipe Equipment by ID
     *
     * Get a recipe&#39;s equipment list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipeEquipmentByIDTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.getRecipeEquipmentByID(id);

        // TODO: test validations
    }
    
    /**
     * Get Recipe Information
     *
     * Get information about a recipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipeInformationTest() throws ApiException {
        BigDecimal id = null;
        Boolean includeNutrition = null;
        Object response = api.getRecipeInformation(id, includeNutrition);

        // TODO: test validations
    }
    
    /**
     * Get Recipe Information Bulk
     *
     * Get information about multiple recipes at once. That is equivalent of calling the Get Recipe Information endpoint multiple times but is faster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipeInformationBulkTest() throws ApiException {
        String ids = null;
        Boolean includeNutrition = null;
        Object response = api.getRecipeInformationBulk(ids, includeNutrition);

        // TODO: test validations
    }
    
    /**
     * Get Recipe Ingredients by ID
     *
     * Get a recipe&#39;s ingredient list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipeIngredientsByIDTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.getRecipeIngredientsByID(id);

        // TODO: test validations
    }
    
    /**
     * Get Recipe Nutrition by ID
     *
     * Get a recipe&#39;s nutrition widget data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipeNutritionByIDTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.getRecipeNutritionByID(id);

        // TODO: test validations
    }
    
    /**
     * Get Recipe Price Breakdown by ID
     *
     * Get a recipe&#39;s price breakdown data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipePriceBreakdownByIDTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.getRecipePriceBreakdownByID(id);

        // TODO: test validations
    }
    
    /**
     * Get Similar Recipes
     *
     * Find recipes which are similar to the given one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSimilarRecipesTest() throws ApiException {
        BigDecimal id = null;
        BigDecimal number = null;
        Object response = api.getSimilarRecipes(id, number);

        // TODO: test validations
    }
    
    /**
     * Get Wine Description
     *
     * Get the description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWineDescriptionTest() throws ApiException {
        String wine = null;
        Object response = api.getWineDescription(wine);

        // TODO: test validations
    }
    
    /**
     * Get Wine Pairing
     *
     * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWinePairingTest() throws ApiException {
        String food = null;
        BigDecimal maxPrice = null;
        Object response = api.getWinePairing(food, maxPrice);

        // TODO: test validations
    }
    
    /**
     * Get Wine Recommendation
     *
     * Get a specific wine recommendation (concrete product) for a given wine, e.g. \&quot;merlot\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWineRecommendationTest() throws ApiException {
        String wine = null;
        BigDecimal maxPrice = null;
        BigDecimal minRating = null;
        BigDecimal number = null;
        Object response = api.getWineRecommendation(wine, maxPrice, minRating, number);

        // TODO: test validations
    }
    
    /**
     * Guess Nutrition by Dish Name
     *
     * Guess the macro nutrients of a dish given its title.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guessNutritionByDishNameTest() throws ApiException {
        String title = null;
        Object response = api.guessNutritionByDishName(title);

        // TODO: test validations
    }
    
    /**
     * Map Ingredients to Grocery Products
     *
     * Map a set of ingredients to products you can buy in the grocery store.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mapIngredientsToGroceryProductsTest() throws ApiException {
        Object body = null;
        Object response = api.mapIngredientsToGroceryProducts(body);

        // TODO: test validations
    }
    
    /**
     * Parse Ingredients
     *
     * Extract an ingredient from plain text.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void parseIngredientsTest() throws ApiException {
        String ingredientList = null;
        BigDecimal servings = null;
        Boolean includeNutrition = null;
        Object response = api.parseIngredients(ingredientList, servings, includeNutrition);

        // TODO: test validations
    }
    
    /**
     * Quick Answer
     *
     * Answer a nutrition related natural language question.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickAnswerTest() throws ApiException {
        String q = null;
        Object response = api.quickAnswer(q);

        // TODO: test validations
    }
    
    /**
     * Search Food Videos
     *
     * Find recipe and other food related videos.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchFoodVideosTest() throws ApiException {
        String query = null;
        String type = null;
        String cuisine = null;
        String diet = null;
        String includeIngredients = null;
        String excludeIngredients = null;
        BigDecimal minLength = null;
        BigDecimal maxLength = null;
        BigDecimal offset = null;
        BigDecimal number = null;
        Object response = api.searchFoodVideos(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number);

        // TODO: test validations
    }
    
    /**
     * Search Grocery Products
     *
     * Search packaged food products such as frozen pizza and snickers bars.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchGroceryProductsTest() throws ApiException {
        String query = null;
        BigDecimal minCalories = null;
        BigDecimal maxCalories = null;
        BigDecimal minCarbs = null;
        BigDecimal maxCarbs = null;
        BigDecimal minProtein = null;
        BigDecimal maxProtein = null;
        BigDecimal minFat = null;
        BigDecimal maxFat = null;
        BigDecimal offset = null;
        BigDecimal number = null;
        Object response = api.searchGroceryProducts(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number);

        // TODO: test validations
    }
    
    /**
     * Search Grocery Products by UPC
     *
     * Get information about a food product given its UPC.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchGroceryProductsByUPCTest() throws ApiException {
        BigDecimal upc = null;
        Object response = api.searchGroceryProductsByUPC(upc);

        // TODO: test validations
    }
    
    /**
     * Search Menu Items
     *
     * Search over 115,000 menu items from over 800 fast food and chain restaurants such as McDonalds Big Mac or Starbucks Mocha.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchMenuItemsTest() throws ApiException {
        String query = null;
        BigDecimal minCalories = null;
        BigDecimal maxCalories = null;
        BigDecimal minCarbs = null;
        BigDecimal maxCarbs = null;
        BigDecimal minProtein = null;
        BigDecimal maxProtein = null;
        BigDecimal minFat = null;
        BigDecimal maxFat = null;
        BigDecimal offset = null;
        BigDecimal number = null;
        Object response = api.searchMenuItems(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number);

        // TODO: test validations
    }
    
    /**
     * Search Recipes
     *
     * Our recipe API includes over 360,000 recipes as well as an open source recipe database. Consider using the \&quot;Search Recipes Complex\&quot; endpoint for much more flexibility.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchRecipesTest() throws ApiException {
        String query = null;
        String cuisine = null;
        String diet = null;
        String excludeIngredients = null;
        String intolerances = null;
        BigDecimal offset = null;
        BigDecimal number = null;
        Boolean limitLicense = null;
        Boolean instructionsRequired = null;
        Object response = api.searchRecipes(query, cuisine, diet, excludeIngredients, intolerances, offset, number, limitLicense, instructionsRequired);

        // TODO: test validations
    }
    
    /**
     * Search Recipes by Ingredients
     *
     * Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a \&quot;what&#39;s in your fridge\&quot; API endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchRecipesByIngredientsTest() throws ApiException {
        String ingredients = null;
        BigDecimal number = null;
        Boolean limitLicense = null;
        BigDecimal ranking = null;
        Boolean ignorePantry = null;
        Object response = api.searchRecipesByIngredients(ingredients, number, limitLicense, ranking, ignorePantry);

        // TODO: test validations
    }
    
    /**
     * Search Recipes by Nutrients
     *
     * Find a set of recipes that adhere to the given nutritional limits. All the returned recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchRecipesByNutrientsTest() throws ApiException {
        BigDecimal minCarbs = null;
        BigDecimal maxCarbs = null;
        BigDecimal minProtein = null;
        BigDecimal maxProtein = null;
        BigDecimal minCalories = null;
        BigDecimal maxCalories = null;
        BigDecimal minFat = null;
        BigDecimal maxFat = null;
        BigDecimal minAlcohol = null;
        BigDecimal maxAlcohol = null;
        BigDecimal minCaffeine = null;
        BigDecimal maxCaffeine = null;
        BigDecimal minCopper = null;
        BigDecimal maxCopper = null;
        BigDecimal minCalcium = null;
        BigDecimal maxCalcium = null;
        BigDecimal minCholine = null;
        BigDecimal maxCholine = null;
        BigDecimal minCholesterol = null;
        BigDecimal maxCholesterol = null;
        BigDecimal minFluoride = null;
        BigDecimal maxFluoride = null;
        BigDecimal minSaturatedFat = null;
        BigDecimal maxSaturatedFat = null;
        BigDecimal minVitaminA = null;
        BigDecimal maxVitaminA = null;
        BigDecimal minVitaminC = null;
        BigDecimal maxVitaminC = null;
        BigDecimal minVitaminD = null;
        BigDecimal maxVitaminD = null;
        BigDecimal minVitaminE = null;
        BigDecimal maxVitaminE = null;
        BigDecimal minVitaminK = null;
        BigDecimal maxVitaminK = null;
        BigDecimal minVitaminB1 = null;
        BigDecimal maxVitaminB1 = null;
        BigDecimal minVitaminB2 = null;
        BigDecimal maxVitaminB2 = null;
        BigDecimal minVitaminB5 = null;
        BigDecimal maxVitaminB5 = null;
        BigDecimal minVitaminB3 = null;
        BigDecimal maxVitaminB3 = null;
        BigDecimal minVitaminB6 = null;
        BigDecimal maxVitaminB6 = null;
        BigDecimal minVitaminB12 = null;
        BigDecimal maxVitaminB12 = null;
        BigDecimal minFiber = null;
        BigDecimal maxFiber = null;
        BigDecimal minFolate = null;
        BigDecimal maxFolate = null;
        BigDecimal minFolicAcid = null;
        BigDecimal maxFolicAcid = null;
        BigDecimal minIodine = null;
        BigDecimal maxIodine = null;
        BigDecimal minIron = null;
        BigDecimal maxIron = null;
        BigDecimal minMagnesium = null;
        BigDecimal maxMagnesium = null;
        BigDecimal minManganese = null;
        BigDecimal maxManganese = null;
        BigDecimal minPhosphorus = null;
        BigDecimal maxPhosphorus = null;
        BigDecimal minPotassium = null;
        BigDecimal maxPotassium = null;
        BigDecimal minSelenium = null;
        BigDecimal maxSelenium = null;
        BigDecimal minSodium = null;
        BigDecimal maxSodium = null;
        BigDecimal minSugar = null;
        BigDecimal maxSugar = null;
        BigDecimal minZinc = null;
        BigDecimal maxZinc = null;
        BigDecimal offset = null;
        BigDecimal number = null;
        Boolean random = null;
        Boolean limitLicense = null;
        Object response = api.searchRecipesByNutrients(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense);

        // TODO: test validations
    }
    
    /**
     * Search Recipes Complex
     *
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: Since this method combines searching by query, by ingredients, and by nutrients in one endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchRecipesComplexTest() throws ApiException {
        String query = null;
        String cuisine = null;
        String excludeCuisine = null;
        String diet = null;
        String intolerances = null;
        String equipment = null;
        String includeIngredients = null;
        String excludeIngredients = null;
        String type = null;
        Boolean instructionsRequired = null;
        Boolean fillIngredients = null;
        Boolean addRecipeInformation = null;
        String author = null;
        String tags = null;
        String titleMatch = null;
        String sort = null;
        String sortDirection = null;
        BigDecimal minCarbs = null;
        BigDecimal maxCarbs = null;
        BigDecimal minProtein = null;
        BigDecimal maxProtein = null;
        BigDecimal minCalories = null;
        BigDecimal maxCalories = null;
        BigDecimal minFat = null;
        BigDecimal maxFat = null;
        BigDecimal minAlcohol = null;
        BigDecimal maxAlcohol = null;
        BigDecimal minCaffeine = null;
        BigDecimal maxCaffeine = null;
        BigDecimal minCopper = null;
        BigDecimal maxCopper = null;
        BigDecimal minCalcium = null;
        BigDecimal maxCalcium = null;
        BigDecimal minCholine = null;
        BigDecimal maxCholine = null;
        BigDecimal minCholesterol = null;
        BigDecimal maxCholesterol = null;
        BigDecimal minFluoride = null;
        BigDecimal maxFluoride = null;
        BigDecimal minSaturatedFat = null;
        BigDecimal maxSaturatedFat = null;
        BigDecimal minVitaminA = null;
        BigDecimal maxVitaminA = null;
        BigDecimal minVitaminC = null;
        BigDecimal maxVitaminC = null;
        BigDecimal minVitaminD = null;
        BigDecimal maxVitaminD = null;
        BigDecimal minVitaminE = null;
        BigDecimal maxVitaminE = null;
        BigDecimal minVitaminK = null;
        BigDecimal maxVitaminK = null;
        BigDecimal minVitaminB1 = null;
        BigDecimal maxVitaminB1 = null;
        BigDecimal minVitaminB2 = null;
        BigDecimal maxVitaminB2 = null;
        BigDecimal minVitaminB5 = null;
        BigDecimal maxVitaminB5 = null;
        BigDecimal minVitaminB3 = null;
        BigDecimal maxVitaminB3 = null;
        BigDecimal minVitaminB6 = null;
        BigDecimal maxVitaminB6 = null;
        BigDecimal minVitaminB12 = null;
        BigDecimal maxVitaminB12 = null;
        BigDecimal minFiber = null;
        BigDecimal maxFiber = null;
        BigDecimal minFolate = null;
        BigDecimal maxFolate = null;
        BigDecimal minFolicAcid = null;
        BigDecimal maxFolicAcid = null;
        BigDecimal minIodine = null;
        BigDecimal maxIodine = null;
        BigDecimal minIron = null;
        BigDecimal maxIron = null;
        BigDecimal minMagnesium = null;
        BigDecimal maxMagnesium = null;
        BigDecimal minManganese = null;
        BigDecimal maxManganese = null;
        BigDecimal minPhosphorus = null;
        BigDecimal maxPhosphorus = null;
        BigDecimal minPotassium = null;
        BigDecimal maxPotassium = null;
        BigDecimal minSelenium = null;
        BigDecimal maxSelenium = null;
        BigDecimal minSodium = null;
        BigDecimal maxSodium = null;
        BigDecimal minSugar = null;
        BigDecimal maxSugar = null;
        BigDecimal minZinc = null;
        BigDecimal maxZinc = null;
        BigDecimal offset = null;
        BigDecimal number = null;
        Boolean limitLicense = null;
        Object response = api.searchRecipesComplex(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, author, tags, titleMatch, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense);

        // TODO: test validations
    }
    
    /**
     * Search Site Content
     *
     * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggests on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSiteContentTest() throws ApiException {
        String query = null;
        Object response = api.searchSiteContent(query);

        // TODO: test validations
    }
    
    /**
     * Summarize Recipe
     *
     * Summarize the recipe in a short text.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void summarizeRecipeTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.summarizeRecipe(id);

        // TODO: test validations
    }
    
    /**
     * Talk to Chatbot
     *
     * This endpoint can be used to have a conversation about food with the spoonacular chat bot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void talkToChatbotTest() throws ApiException {
        String text = null;
        String contextId = null;
        Object response = api.talkToChatbot(text, contextId);

        // TODO: test validations
    }
    
    /**
     * Visualize Equipment
     *
     * Visualize the equipment used to make a recipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeEquipmentTest() throws ApiException {
        String ingredientList = null;
        BigDecimal servings = null;
        String view = null;
        Boolean defaultCss = null;
        Boolean showBacklink = null;
        String response = api.visualizeEquipment(ingredientList, servings, view, defaultCss, showBacklink);

        // TODO: test validations
    }
    
    /**
     * Visualize Ingredients
     *
     * Visualize ingredients of a recipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeIngredientsTest() throws ApiException {
        String ingredientList = null;
        BigDecimal servings = null;
        String measure = null;
        String view = null;
        Boolean defaultCss = null;
        Boolean showBacklink = null;
        String response = api.visualizeIngredients(ingredientList, servings, measure, view, defaultCss, showBacklink);

        // TODO: test validations
    }
    
    /**
     * Visualize Menu Item Nutrition by ID
     *
     * Visualize a menu items&#39; nutrition data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeMenuItemNutritionByIDTest() throws ApiException {
        BigDecimal id = null;
        Boolean defaultCss = null;
        String response = api.visualizeMenuItemNutritionByID(id, defaultCss);

        // TODO: test validations
    }
    
    /**
     * Visualize Price Breakdown
     *
     * Visualize the price breakdown of a recipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizePriceBreakdownTest() throws ApiException {
        String ingredientList = null;
        BigDecimal servings = null;
        BigDecimal mode = null;
        Boolean defaultCss = null;
        Boolean showBacklink = null;
        String response = api.visualizePriceBreakdown(ingredientList, servings, mode, defaultCss, showBacklink);

        // TODO: test validations
    }
    
    /**
     * Visualize Product Nutrition by ID
     *
     * Visualize a grocery product&#39;s nutritional information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeProductNutritionByIDTest() throws ApiException {
        BigDecimal id = null;
        Boolean defaultCss = null;
        String response = api.visualizeProductNutritionByID(id, defaultCss);

        // TODO: test validations
    }
    
    /**
     * Visualize Recipe Equipment by ID
     *
     * Visualize a recipe&#39;s equipment list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeRecipeEquipmentByIDTest() throws ApiException {
        BigDecimal id = null;
        Boolean defaultCss = null;
        String response = api.visualizeRecipeEquipmentByID(id, defaultCss);

        // TODO: test validations
    }
    
    /**
     * Visualize Recipe Ingredients by ID
     *
     * Visualize a recipe&#39;s ingredient list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeRecipeIngredientsByIDTest() throws ApiException {
        BigDecimal id = null;
        Boolean defaultCss = null;
        String response = api.visualizeRecipeIngredientsByID(id, defaultCss);

        // TODO: test validations
    }
    
    /**
     * Visualize Recipe Nutrition
     *
     * Visualize a recipe&#39;s nutrition data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeRecipeNutritionTest() throws ApiException {
        String ingredientList = null;
        BigDecimal servings = null;
        Boolean defaultCss = null;
        Boolean showBacklink = null;
        String response = api.visualizeRecipeNutrition(ingredientList, servings, defaultCss, showBacklink);

        // TODO: test validations
    }
    
    /**
     * Visualize Recipe Nutrition by ID
     *
     * Visualize a recipe&#39;s nutritional information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeRecipeNutritionByIDTest() throws ApiException {
        BigDecimal id = null;
        Boolean defaultCss = null;
        String response = api.visualizeRecipeNutritionByID(id, defaultCss);

        // TODO: test validations
    }
    
    /**
     * Visualize Recipe Price Breakdown by ID
     *
     * Visualize a recipe&#39;s price breakdown.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void visualizeRecipePriceBreakdownByIDTest() throws ApiException {
        BigDecimal id = null;
        Boolean defaultCss = null;
        String response = api.visualizeRecipePriceBreakdownByID(id, defaultCss);

        // TODO: test validations
    }
    
}
